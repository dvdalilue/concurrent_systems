Some basic exercises to practise with recursion and basic data structures
=========================================================================

0. Write a function fib(I) which returns the fibonacci number I,
i.e., fib(1) -> 1; fib(2) -> 1; fib(3) -> 2; etc.

Experiment with different versions using or not using guards, i.e.,
assert is_integer, and checking values (N>..).
Use the erlang shell to call the function, assign the result to
a variable, e.g. (think about the reason for the results):

> fib(2).
> fib(0.5).
> fib(-4).
> fib([]).
> X = fib(7).
> X.
> X == 5.
> fib(X).
> X = fib(7).
> X = fib(5).

Experiment with writing using multiple function clauses
(i.e., fib(1) -> ...; fib(2) -> ...),
and with a case statement.
Look at the if statement and try to use that too.

1. Write a function sum(L), where L is a list, to calculate the sum
of integers in the list L, i.e., sum([1,2,3,4]) ----> 10,
sum([5,a,2]) -> 7.

2. Write a function member(E,L) which looks for E inside L, and returns
true if found and false otherwise (the atoms true and false are the
Erlang truth values).  member(0,[]) ----> false, member(0,[1,2,0]) ---> true

2.5 Write a function insert(I,L) which inserts an integer in
a sorted list of integers, so that the list stays sorted.
That is, insert(0,[]) -> [0];   insert(0,[1]) -> [0,1]; insert(5,[1,5,8]) ->
[1,5,5,8]; etc.

Test insert with different elements to sort and different lists.

3. Write a function sort(L), which sorts the elements in L in ascending
order (use your favourite sorting algorithm).

What happens if you call the function with a list containing differently
typed elements, e.g.,:

> sort([a,2,13,2,0.5,{hola,hei}]).

4. Write a function fib_with_index which returns:

   fib(1) -> {1,1};
   fib(2) -> {2,1};
   fib(3) -> {3,2};
   ...

That is, it returns both the index and the fibonacci number.

5. Write a function keyfind(Key,List), which given a list
of tuples [{Key0,Value0}, ..., {KeyN,ValueN}]
returns {KeyI,ValueI} if KeyI is the first key that matches Key,
and if no key matches false should be returned.


6. Write a function merge(L1,L2) that merges two list which are
assumed to be sorted in ascending order, returning a list of elements
in ascending order.

That is:

     merge([],[])    ---> []
     merge([1],[])   ---> [1]
     merge([1,1,3],[0,1,4])   ---> [0,1,1,1,3,4]

