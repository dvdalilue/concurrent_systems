Detecting and handling faults
=============================

- First read up on the process linking API (erlang:link/1, erlang:unlink/1,
exit/0, exit/2, process_flag(trap_exit) and the process monitoring API (erlang:monitor, erlang:demonitor).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- Implement the printer example we spoke briefly about during the class:

1. a client sends a request {req,Pid} to the printer server
2. a printer server grants access (but only for one client at a time)
by replying with the message ok to the client
3. the client eventually sends an item to be printed:
  {print, Item} to the printer server
4. the server responds with printed when the item is printed,
and is ready to reply to another request
(obviously you don't have to actually print anything, it is just a conceptual
sketch :-)

- What happens if a client fails (raises an exception, exits) when
it has received printer access?

- What happens if a client fails (raises an exception, exits) when
it has requested printer access, but not yet received it?

- Program the printer server (and client) so that the system can
handle such client failures (with links, or monitors, or best(!) experiment
with both solutions).

- Does the client need to handle printer server errors? If you decide yes,
please implement such handling too.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- As an alternative here are some (not too many) exercises on implementing
a remote procedure call facility in Erlang.
When you are done with this, return to the Google map-reduce example, or 
look at other examples in the Erlang books.

- Provide a module myrpc, which implements remote procedure calls (rpc).

   myrpc:start()              -- starts the rpc process
   myrpc:apply(Fun,Args)      -- sends Fun and the list of values
                        Args to the started rpc
                        process, and returns the answer of computing
                 Fun applied to the argument list Args
                 (hint: read about erlang:apply/2)
                 -- we write the operation of applying Fun to Args as 
Fun(Args) in the following.

                 The call looks like a normal function call, but
                 is evaluated by the rpc process, instead of in the 
calling process.

                 Note that the pid of the rpc process
                 is NOT communicated in the apply function, how
                 can they still communicate?

- Test it: an example is myrpc:start(), myrpc:apply(fun erlang:self/0, []).

- Does myrpc:apply(fun () -> myrpc:apply(fun (X,Y) -> X+Y end, [1,2]) 
end,[])
work?

   Note that a single call should not block the whole rpc server, i.e.,
   do the computation in a new process.

- Implement the variant call: myrpc:apply(Fun,Args,Timeout)
   where if the function call does not return within Timeout milliseconds,
   the call returns the atom 'timeout'.

   That is, myrpc:apply(fun () -> receive X -> X end, [], 1000) ==> 
'timeout'.

   Make sure that if the call Fun(Args),
   after a long delay, returns an answer the caller of myrpc:apply/2
   does not get a second message in addition to the timeout message.
   How can this be done reliably?

- Make sure that if the call Fun(Args) raises an exception the
   call myrpc:apply(Fun,Args) returns a tuple {'call_exception', Reason}
   where Reason is the reason for the exception.

- Make sure that if the rpc server itself crashes, a call
   myrpc:apply(Fun,Args) returns the atom 'server_crashed'.

- Try your implementation with a faulty myrpc server, i.e.,
introduce a bug.

- Implement an automatic restart functionality for the rpc server, this
can for instance be another process that monitors/links the server,
and when it notices that the server crashes, a new server process is 
created.

- Try to run the rpc server on an Erlang node (runtime system)
separate from the calling process; any problems?

- Implement a new call:

myrpc:apply_after(Delay,Fun,Args) that executes Fun(Args), remotely,
after a delay of Delay milliseconds.

- How could you implement the function
   myrpc:terminate()
   which should terminate the rpc server, and all ongoing remote procedure
   calls, as soon as possible?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- Does the bank application need fault-tolernace handling?





